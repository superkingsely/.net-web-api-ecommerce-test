Perfect ðŸŽ¯ Letâ€™s build a **mini User CRUD flow** inside our Clean Architecture solution step by step.

Weâ€™ll connect **Domain â†’ Application â†’ Infrastructure â†’ WebApi** so you see how everything fits.

---

# ðŸ“Œ Step 1: Create `User` Entity (Domain Layer)

ðŸ“‚ `src/Domain/Entities/User.cs`

```csharp
namespace Domain.Entities;

public class User
{
    public int Id { get; set; }
    public string Name { get; set; } = string.Empty;
    public string Email { get; set; } = string.Empty;
}
```

---

# ðŸ“Œ Step 2: Create User Repository Interface (Domain Layer)

ðŸ“‚ `src/Domain/Interfaces/IUserRepository.cs`

```csharp
using Domain.Entities;

namespace Domain.Interfaces;

public interface IUserRepository
{
    Task<User> GetByIdAsync(int id);
    Task<IEnumerable<User>> GetAllAsync();
    Task<User> AddAsync(User user);
    Task<User> UpdateAsync(User user);
    Task DeleteAsync(int id);
}
```

---

# ðŸ“Œ Step 3: Application Layer (Use Case Services)

ðŸ“‚ `src/Application/Services/UserService.cs`

```csharp
using Domain.Entities;
using Domain.Interfaces;

namespace Application.Services;

public class UserService
{
    private readonly IUserRepository _repository;

    public UserService(IUserRepository repository)
    {
        _repository = repository;
    }

    public Task<User> GetUser(int id) => _repository.GetByIdAsync(id);
    public Task<IEnumerable<User>> GetUsers() => _repository.GetAllAsync();
    public Task<User> CreateUser(User user) => _repository.AddAsync(user);
    public Task<User> UpdateUser(User user) => _repository.UpdateAsync(user);
    public Task DeleteUser(int id) => _repository.DeleteAsync(id);
}
```

---

# ðŸ“Œ Step 4: Infrastructure Layer (EF Core + Repository Implementation)

1. Add EF Core packages:

```bash
dotnet add src/Infrastructure/Infrastructure.csproj package Microsoft.EntityFrameworkCore
dotnet add src/Infrastructure/Infrastructure.csproj package Microsoft.EntityFrameworkCore.SqlServer
dotnet add src/Infrastructure/Infrastructure.csproj package Microsoft.EntityFrameworkCore.Tools
```

2. Create `AppDbContext`

ðŸ“‚ `src/Infrastructure/Data/AppDbContext.cs`

```csharp
using Domain.Entities;
using Microsoft.EntityFrameworkCore;

namespace Infrastructure.Data;

public class AppDbContext : DbContext
{
    public AppDbContext(DbContextOptions<AppDbContext> options) : base(options) { }

    public DbSet<User> Users { get; set; }
}
```

3. Implement `UserRepository`

ðŸ“‚ `src/Infrastructure/Repositories/UserRepository.cs`

```csharp
using Domain.Entities;
using Domain.Interfaces;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;

namespace Infrastructure.Repositories;

public class UserRepository : IUserRepository
{
    private readonly AppDbContext _context;
    public UserRepository(AppDbContext context)
    {
        _context = context;
    }

    public async Task<User> GetByIdAsync(int id) =>
        await _context.Users.FindAsync(id);

    public async Task<IEnumerable<User>> GetAllAsync() =>
        await _context.Users.ToListAsync();

    public async Task<User> AddAsync(User user)
    {
        _context.Users.Add(user);
        await _context.SaveChangesAsync();
        return user;
    }

    public async Task<User> UpdateAsync(User user)
    {
        _context.Users.Update(user);
        await _context.SaveChangesAsync();
        return user;
    }

    public async Task DeleteAsync(int id)
    {
        var user = await _context.Users.FindAsync(id);
        if (user != null)
        {
            _context.Users.Remove(user);
            await _context.SaveChangesAsync();
        }
    }
}
```

---

# ðŸ“Œ Step 5: Infrastructure Dependency Injection

ðŸ“‚ `src/Infrastructure/DependencyInjection.cs`

```csharp
using Application.Services;
using Domain.Interfaces;
using Infrastructure.Data;
using Infrastructure.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;

namespace Infrastructure;

public static class DependencyInjection
{
    public static IServiceCollection AddInfrastructure(this IServiceCollection services, IConfiguration config)
    {
        services.AddDbContext<AppDbContext>(options =>
            options.UseSqlServer(config.GetConnectionString("DefaultConnection")));

        services.AddScoped<IUserRepository, UserRepository>();
        services.AddScoped<UserService>();

        return services;
    }
}
```

---

# ðŸ“Œ Step 6: WebApi Layer (Controller)

ðŸ“‚ `src/WebApi/Controllers/UsersController.cs`

```csharp
using Application.Services;
using Domain.Entities;
using Microsoft.AspNetCore.Mvc;

namespace WebApi.Controllers;

[ApiController]
[Route("api/[controller]")]
public class UsersController : ControllerBase
{
    private readonly UserService _service;

    public UsersController(UserService service)
    {
        _service = service;
    }

    [HttpGet("{id}")]
    public async Task<ActionResult<User>> GetUser(int id) =>
        Ok(await _service.GetUser(id));

    [HttpGet]
    public async Task<ActionResult<IEnumerable<User>>> GetUsers() =>
        Ok(await _service.GetUsers());

    [HttpPost]
    public async Task<ActionResult<User>> CreateUser(User user) =>
        Ok(await _service.CreateUser(user));

    [HttpPut("{id}")]
    public async Task<ActionResult<User>> UpdateUser(int id, User user)
    {
        if (id != user.Id) return BadRequest();
        return Ok(await _service.UpdateUser(user));
    }

    [HttpDelete("{id}")]
    public async Task<IActionResult> DeleteUser(int id)
    {
        await _service.DeleteUser(id);
        return NoContent();
    }
}
```

---

# ðŸ“Œ Step 7: Register Infrastructure in `Program.cs`

ðŸ“‚ `src/WebApi/Program.cs`

```csharp
using Infrastructure;

var builder = WebApplication.CreateBuilder(args);

// Add services
builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

// Register Infrastructure & Application
builder.Services.AddInfrastructure(builder.Configuration);

var app = builder.Build();

if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();
app.UseAuthorization();
app.MapControllers();
app.Run();
```

---

# ðŸ“Œ Step 8: Add Connection String

ðŸ“‚ `src/WebApi/appsettings.json`

```json
{
  "ConnectionStrings": {
    "DefaultConnection": "Server=localhost;Database=CleanArchDb;Trusted_Connection=True;TrustServerCertificate=True;"
  },
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*"
}
```

---

âœ… Now you have a **working User CRUD** across all layers.

ðŸ‘‰ Run migrations & update DB:

```bash
dotnet ef migrations add InitialCreate -p src/Infrastructure -s src/WebApi
dotnet ef database update -p src/Infrastructure -s src/WebApi
```

ðŸ‘‰ Run API:

```bash
dotnet run --project src/WebApi
```

Swagger will open, and you can test `Users` endpoints ðŸŽ‰.

---

Do you want me to also **draw a diagram** showing how the request flows through Domain â†’ Application â†’ Infrastructure â†’ WebApi for this CRUD?
