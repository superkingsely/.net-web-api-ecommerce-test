
cli cmd

create ur project folder

dotnet new sln -n <project folder>

inside the root create the src folder
then inside the src/ dotnet new webapi -n <folder name> [note the webapi is the csproj]

now the gitignore file?
-------------------------------------------------------
to run ur project
cd MyWebApi/
dotnet watch run
That will launch your WebAPI directly.

If youâ€™re at the solution level (.sln), you must specify the project manually:

bash
Copy code
dotnet watch run --project MyWebApi/MyWebApi.csproj

-------------------------------------------------------
2. For a Beginner in Clean Architecture

ðŸ‘‰ Since youâ€™re just starting out and want something free, simple, but also production-ready, Iâ€™d recommend:

SQL Server Express â€“ if you want to stay close to Microsoft stack.

PostgreSQL â€“ if you want an open-source DB that scales globally (lots of companies using it).

SQLite â€“ if youâ€™re just prototyping locally before moving to a real DB.

âœ… For you, Iâ€™d say start with SQL Server Express or PostgreSQL.
Both are easy to use with Entity Framework Core (EF Core), which is the standard ORM for .NET.
--------------------------------------------------
MySolution/
â”œâ”€â”€ Application/        <-- Business logic (no DB code here)
â”œâ”€â”€ Domain/             <-- Entities, core models (no DB code here)
â”œâ”€â”€ Infrastructure/     <-- âœ… Database lives here (EF Core, Repositories, Migrations)
â””â”€â”€ WebApi/             <-- API endpoints (controllers)
----------------------------------------------

dotnet new classlib -n MyApi.Domain
rm -rf src/MyApi.Domain (bash to delete)
-----------------------------------------------
In .NET projects, the project name (.csproj) and the namespace it generates usually follow PascalCase (capitalized words)

------------------------------------------------
# Application depends on Domain
dotnet add src/MyApi.Application/MyApi.Application.csproj reference src/MyApi.Domain/MyApi.Domain.csproj

# Infrastructure depends on Application + Domain
dotnet add src/MyApi.Infrastructure/MyApi.Infrastructure.csproj reference src/MyApi.Application/MyApi.Application.csproj
dotnet add src/MyApi.Infrastructure/MyApi.Infrastructure.csproj reference src/MyApi.Domain/MyApi.Domain.csproj

# WebApi depends on Application + Infrastructure
dotnet add src/MyApi/MyApi.csproj reference src/MyApi.Application/MyApi.Application.csproj
dotnet add src/MyApi/MyApi.csproj reference src/MyApi.Infrastructure/MyApi.Infrastructure.csproj
-----------------------------------
WebApi  â†’  Application  â†’  Domain
   â†“            â†‘
Infrastructure â”˜
Domain = core business rules, entities, value objects

Application = use cases, interfaces, DTOs

Infrastructure = EF Core, external services, repository implementations

WebApi = controllers, API endpoints
src/
   webapi/
   WebApi.Application/
   WebApi.Domain/
   WebApi.Infrastructure/
   -------------------------------------------------
      Infrastructure/
â”œâ”€â”€ Infrastructure.csproj
â””â”€â”€ DependencyInjection.cs
   -------------------------------------------
   cd src/Infrastructure
Use the dotnet new class command

bash
Copy code
dotnet new class -n DependencyInjection
   --------------------------------------
   public static class DependencyInjection
{
    public static IServiceCollection AddInfrastructure(this IServiceCollection services, IConfiguration config)
    {
        services.AddDbContext<AppDbContext>(options =>
            options.UseSqlServer(config.GetConnectionString("DefaultConnection")));

        services.AddScoped<IUserRepository, UserRepository>();

        return services;
    }
}
--------------------------------------------------------
to create a class
dotnet new class -n User -o src/Domain/Entities
---------------------------------------------------
DatabaseDeployment options

When deploying your .NET Web API project, you need a remote database that your API can connect to. For free/cheap hosting, you can use:

SQLite â†’ single .db file, can be deployed with your app (works for small projects, personal apps).

PostgreSQL (with Npgsql EF Core provider) â†’ free tiers available on Supabase, Railway, Render, Neon.tech.

MySQL â†’ free tier on Clever Cloud, Railway, PlanetScale.

Azure SQL Database â†’ Microsoft gives you a free trial, but not truly free forever.